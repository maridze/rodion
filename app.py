import streamlit as st
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from zip_utils import extract_zip, clear_temp_files, process_folder

base_cols = ['–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–ò–∑–≤–µ—â–µ–Ω–∏–µ)', '–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', 
             '–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏', '–ó–∞–∫–æ–Ω', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ', '–ò–ù–ù', '–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞']

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("–†–∞–±–æ—Ç–∞ —Å ZIP –∞—Ä—Ö–∏–≤–∞–º–∏ –∏ –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù")

# –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤", type=["zip"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
file_path = "uploaded_archive.zip"
extract_dir = "extracted_files"

# –ü—É—Ç—å –∫ —Ç–∞–±–ª–∏—Ü–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ db
db_path = "db/–î–ê–ù–ù–´–ï –î–ò–ü–õ–û–ú –ë–û–õ–¨–®–ò–ï.xlsx"

if uploaded_file is not None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    st.success(f"–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.button("–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            files = extract_zip(file_path, extract_dir)
            if files:
                st.write("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ:")
                for file in files:
                    st.write(file)

                # –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ —Å "–ó–∞—è–≤–∫–∞" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                keyword = "–ó–∞—è–≤–∫–∞"
                folder_count = 0
                all_inns = set()

                for root, dirs, files in os.walk(extract_dir):
                    for dir_name in dirs:
                        if keyword.lower() in dir_name.lower():
                            folder_count += 1
                            folder_path = os.path.join(root, dir_name)
                            st.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {folder_path}")

                            result = process_folder(folder_path)
                            if result["inn_list"]:
                                st.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–ø–∫–∏ {dir_name}:")
                                st.write(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ò–ù–ù: {result['inn_list']}")
                                all_inns.update(result["inn_list"])
                            else:
                                st.warning(f"–í –ø–∞–ø–∫–µ {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ò–ù–ù.")

                st.success(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ —Å '{keyword}' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {folder_count}")

                if os.path.exists(db_path):
                    df = pd.read_excel(db_path, usecols=base_cols, dtype={"–ò–ù–ù": str})
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    df['–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'] = pd.to_datetime(
                        df['–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'],
                        dayfirst=True,
                        format='%d.%m.%Y',
                        errors='coerce'
                    )
                    
                    df['–ì–æ–¥'] = df['–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'].dt.year
                    df['–ú–µ—Å—è—Ü'] = df['–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'].dt.month
                    df['–ö–≤–∞—Ä—Ç–∞–ª'] = df['–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'].dt.quarter
                    
                    st.write("–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ db:")
                    st.dataframe(df)

                    if all_inns:
                        filtered_df = df[df["–ò–ù–ù"].astype(str).isin(all_inns)]
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –∑–∞–ø—è—Ç—ã—Ö –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                        for col in ['–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏', '–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞']:
                            filtered_df[col] = (
                                filtered_df[col]
                                .astype(str)
                                .str.replace(',', '.')
                                .replace(' ', '')
                                .replace('[^\d.]', '', regex=True)
                                .pipe(pd.to_numeric, errors='coerce')
                            )
                        
                        st.write("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ò–ù–ù:")
                        st.dataframe(filtered_df)
                        
                        # –†–∞–∑–¥–µ–ª —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
                        st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                      
                            # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∑–∞–∫–æ–Ω–∞–º
                        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–æ–Ω–∞–º")
                        if not filtered_df['–ó–∞–∫–æ–Ω'].empty:
                            law_counts = filtered_df['–ó–∞–∫–æ–Ω'].value_counts()
                            fig, ax = plt.subplots(figsize=(4, 4))
                            ax.pie(law_counts, labels=law_counts.index, autopct='%1.1f%%')
                            st.pyplot(fig)
                        else:
                            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–æ–Ω–∞—Ö")
                        
                       
                            # 2. –¢–æ–ø –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                        st.subheader("–¢–æ–ø –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü")
                        if not filtered_df['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ'].empty:
                            responsible_counts = filtered_df['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ'].value_counts().head(10)
                            fig, ax = plt.subplots(figsize=(10, 6))
                            responsible_counts.plot(kind='barh', ax=ax)
                            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤')
                            st.pyplot(fig)
                        else:
                            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü–∞—Ö")
                        
                        # 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                        if not filtered_df['–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'].empty:
                            fig, ax = plt.subplots(figsize=(10, 5))
                            sns.histplot(
                                filtered_df['–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'].dropna(), 
                                bins=30, 
                                kde=True,
                                log_scale=True,
                                ax=ax
                            )
                            ax.set_xlabel('–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)')
                            st.pyplot(fig)
                        
                        # 6. –¢–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                        st.subheader("–¢–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                        if not filtered_df[['–ò–ù–ù', '–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞']].empty:
                            top_suppliers = filtered_df.groupby('–ò–ù–ù')['–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'].sum().nlargest(10)
                            fig, ax = plt.subplots(figsize=(10, 6))
                            top_suppliers.plot(kind='barh', ax=ax)
                            ax.set_title('–¢–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤')
                            ax.set_xlabel('–û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤')
                            st.pyplot(fig)

                        # 3. –¢–æ–ø –∑–∞–∫—É–ø–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —ç–∫–æ–Ω–æ–º–∏–µ–π
                        st.subheader("–¢–æ–ø-10 –∑–∞–∫—É–ø–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —ç–∫–æ–Ω–æ–º–∏–µ–π")
                        if not filtered_df.empty:
                            top_savings = filtered_df.nlargest(10, '–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏')[['–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏', '–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏', '–ó–∞–∫–æ–Ω']]
                            
                            fig, ax = plt.subplots(figsize=(12, 8))
                            sns.barplot(data=top_savings, y='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏', x='–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏', hue='–ó–∞–∫–æ–Ω', dodge=False)
                            ax.set_title('–¢–æ–ø-10 –∑–∞–∫—É–ø–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–µ–π')
                            ax.set_xlabel('–°—É–º–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏ (—Ä—É–±)')
                            ax.set_ylabel('')
                            st.pyplot(fig)
                        
                    else:
                        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ò–ù–ù –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.")
                else:
                    st.error(f"–§–∞–π–ª {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ db.")

            else:
                st.warning("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
        try:
            clear_temp_files(file_path, extract_dir)
            st.success("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤.")